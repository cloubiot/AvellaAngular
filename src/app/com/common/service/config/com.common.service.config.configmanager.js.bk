"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var http_1 = require('@angular/http');
var core_1 = require('@angular/core');
var ConfigService = (function () {
    function ConfigService(_http) {
        this._http = _http;
        this.Server = "";
        this.AppKey = "";
    }
    ConfigService.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var host = window.location.host;
            console.log("Domain .." + _this.getDomain());
             console.log("config file loading.."+'app/config/'+_this.getDomain()+'.config.json');
            _this._http.get('app/config/' + _this.getDomain() + '.config.json') // path of your config.json file
                .map(function (res) { return res.json(); })
                .subscribe(function (data) {
                _this.Server = data.server;
                _this.AppKey = data.appkey;
                _this.configData = data;
              //  SessionDataService.init().setData("test","Raj");
            //    alert(SessionDataService.init().getData("test"));
                sessionStorage.setItem("configData",JSON.stringify(data));
                console.log("[ConfigService]>>config file loaded successfully2..");
                resolve(true);
            }, function (err) { return console.log(err); });
        });
    };
    ConfigService.prototype.getDomain = function () {
        var host = window.location.host;
        var domain = host.split(":");
        return domain[0];
    };
    ConfigService.prototype.getServer = function () {
        return this.Server;
    };
    ConfigService.prototype.getAppKey = function () {
        return this.AppKey;
    };
    ConfigService.prototype.getProperty = function (key) {
        return this.configData[key];
    };
    ConfigService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], ConfigService);
    return ConfigService;
}());
exports.ConfigService = ConfigService;
//# sourceMappingURL=com.common.service.config.configmanager.js.map